#include "stdafx.h"
#include <Windows.h>
#include <stdio.h>
#include "LPT.h"
#include "DebugLog.h"
#pragma comment(lib,"Win.lib")

#define theLPT_TRACE CFileLog::GetInstance(_T("LPT_"))
//////////////////////////////////////////////////////////////////////////
/**
@brief      构造函数

@param      无

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
OpenLPT::OpenLPT(void)
{
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      析构函数

@param      (无

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
OpenLPT::~OpenLPT(void)
{
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      执行命令

@param      none

@retval     long 0 : 成功  非0 : 失败

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
long OpenLPT::ExecuteCommand(void)
{
	long iRet = 1;
	iRet = ConnectFunction();
	this->OnComplete(iRet);
	return iRet;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      打开

@param      (i)无

@retval     int 0 : 成功  非0 : 失败

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
long OpenLPT::ConnectFunction()
{
	// 初始化并口
	return (InitializeWinIo() == true)?0:1;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      构造函数

@param      (i)WORD inport   端口号
			(i)int insize    大小

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
ReadLPT::ReadLPT(WORD inport,int insize)
{
	port = inport;
	size = insize;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      析构函数

@param      (i)无

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
ReadLPT::~ReadLPT(void)
{
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      执行命令

@param      无

@retval     long  
@retval     long     0:成功  1:读取失败

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
long ReadLPT::ExecuteCommand(void)
{
	long iRet = 1;
	iRet = ReadFunction();
	this->OnComplete(iRet);
	return iRet;
}
//////////////////////////////////////////////////////////////////////////
/**
@brief      读并口

@param      无

@retval     long     0:成功  1:读取失败

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
long ReadLPT::ReadFunction()
{
	long retCode = 0;	
	//读取并口状态数据成功
	DWORD tempValue = 0;
	if (GetPortVal(port, &tempValue, size)){
		m_response = LOBYTE(tempValue);
		retCode = 0;			
	}
	//失败
	else{
		retCode = 1;
	}
	CString sLogString(_T(""));
	sLogString.Format(_T("LPTReadFunction: nPort = %d;size = %d;state = %d"),port,size,m_response);

	theLPT_TRACE->WriteData(_T(">")+sLogString,NULL,0);
	return retCode;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      打开

@param      无

@retval     无
@exception  无
*/
//////////////////////////////////////////////////////////////////////////
void ReadLPT::GetLPTResponse(BYTE& state)
{
	state = m_response;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      构造函数

@param      (i)无

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
CloseLPT::CloseLPT(void)
{
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      析构函数

@param      (i)无

@retval     无  

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
CloseLPT::~CloseLPT(void)
{
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      执行命令

@param      (i)无

@retval     long  \n
0 : 成功  非0 : 失败

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
long CloseLPT::ExecuteCommand(void)
{
	long iRet = 0;
	CloseFunction();
	this->OnComplete(iRet);
	return iRet;
}

//////////////////////////////////////////////////////////////////////////
/**
@brief      关闭并口

@param      none

@retval     none

@exception   无
*/
//////////////////////////////////////////////////////////////////////////
void CloseLPT::CloseFunction()
{
	// 关闭并口
	ShutdownWinIo();
}